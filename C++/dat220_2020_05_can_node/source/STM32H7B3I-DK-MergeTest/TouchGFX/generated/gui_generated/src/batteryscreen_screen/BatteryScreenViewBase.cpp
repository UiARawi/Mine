/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/batteryscreen_screen/BatteryScreenViewBase.hpp>
#include "BitmapDatabase.hpp"
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>

BatteryScreenViewBase::BatteryScreenViewBase() :
    buttonCallback(this, &BatteryScreenViewBase::buttonCallbackHandler),
    sliderValueChangedCallback(this, &BatteryScreenViewBase::sliderValueChangedCallbackHandler)
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);

    image5.setXY(0, 0);
    image5.setBitmap(touchgfx::Bitmap(BITMAP_DARK_BACKGROUNDS_MAIN_BG_TEXTURE_480X272PX_ID));

    CircleProgressBPV.setXY(53, 21);
    CircleProgressBPV.setProgressIndicatorPosition(0, 0, 184, 94);
    CircleProgressBPV.setRange(0, 400);
    CircleProgressBPV.setCenter(92, 92);
    CircleProgressBPV.setRadius(82);
    CircleProgressBPV.setLineWidth(16);
    CircleProgressBPV.setStartEndAngle(-90, 90);
    CircleProgressBPV.setCapPrecision(180);
    CircleProgressBPV.setBackground(touchgfx::Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_BG_LARGE_CIRCLE_INDICATOR_BG_LINE_HALF_ID));
    CircleProgressBPVPainter.setColor(touchgfx::Color::getColorFrom24BitRGB(32, 159, 78));
    CircleProgressBPV.setPainter(CircleProgressBPVPainter);
    CircleProgressBPV.setValue(0);

    batterypackvoltage_textbox.setPosition(50, 121, 190, 19);
    batterypackvoltage_textbox.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    batterypackvoltage_textbox.setLinespacing(0);
    Unicode::snprintf(batterypackvoltage_textboxBuffer, BATTERYPACKVOLTAGE_TEXTBOX_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID2).getText());
    batterypackvoltage_textbox.setWildcard(batterypackvoltage_textboxBuffer);
    batterypackvoltage_textbox.setTypedText(touchgfx::TypedText(T_SINGLEUSEID1));

    circleProgressTemp.setXY(241, 21);
    circleProgressTemp.setProgressIndicatorPosition(0, 0, 184, 94);
    circleProgressTemp.setRange(0, 200);
    circleProgressTemp.setCenter(92, 92);
    circleProgressTemp.setRadius(82);
    circleProgressTemp.setLineWidth(16);
    circleProgressTemp.setStartEndAngle(-90, 90);
    circleProgressTemp.setCapPrecision(180);
    circleProgressTemp.setBackground(touchgfx::Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_BG_LARGE_CIRCLE_INDICATOR_BG_LINE_HALF_ID));
    circleProgressTempPainter.setColor(touchgfx::Color::getColorFrom24BitRGB(32, 159, 78));
    circleProgressTemp.setPainter(circleProgressTempPainter);
    circleProgressTemp.setValue(0);

    Temperature_textbox.setPosition(238, 121, 190, 19);
    Temperature_textbox.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    Temperature_textbox.setLinespacing(0);
    Unicode::snprintf(Temperature_textboxBuffer, TEMPERATURE_TEXTBOX_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID4).getText());
    Temperature_textbox.setWildcard(Temperature_textboxBuffer);
    Temperature_textbox.setTypedText(touchgfx::TypedText(T_SINGLEUSEID3));

    UsableCapacityBoxProgress.setXY(149, 188);
    UsableCapacityBoxProgress.setProgressIndicatorPosition(2, 2, 180, 16);
    UsableCapacityBoxProgress.setRange(0, 100);
    UsableCapacityBoxProgress.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
    UsableCapacityBoxProgress.setBackground(touchgfx::Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_BG_MEDIUM_PROGRESS_INDICATOR_BG_SQUARE_0_DEGREES_ID));
    UsableCapacityBoxProgress.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 255, 51));
    UsableCapacityBoxProgress.setValue(0);

    Usable_remaining_textbox.setPosition(91, 167, 300, 21);
    Usable_remaining_textbox.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    Usable_remaining_textbox.setLinespacing(0);
    Unicode::snprintf(Usable_remaining_textboxBuffer, USABLE_REMAINING_TEXTBOX_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID6).getText());
    Usable_remaining_textbox.setWildcard(Usable_remaining_textboxBuffer);
    Usable_remaining_textbox.setTypedText(touchgfx::TypedText(T_SINGLEUSEID5));

    UsableCapacityFullBoxProgress.setXY(149, 236);
    UsableCapacityFullBoxProgress.setProgressIndicatorPosition(2, 2, 180, 16);
    UsableCapacityFullBoxProgress.setRange(0, 100);
    UsableCapacityFullBoxProgress.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
    UsableCapacityFullBoxProgress.setBackground(touchgfx::Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_BG_MEDIUM_PROGRESS_INDICATOR_BG_SQUARE_0_DEGREES_ID));
    UsableCapacityFullBoxProgress.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 255, 51));
    UsableCapacityFullBoxProgress.setValue(0);

    Usable_full_textbox.setPosition(91, 216, 300, 21);
    Usable_full_textbox.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    Usable_full_textbox.setLinespacing(0);
    Unicode::snprintf(Usable_full_textboxBuffer, USABLE_FULL_TEXTBOX_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID8).getText());
    Usable_full_textbox.setWildcard(Usable_full_textboxBuffer);
    Usable_full_textbox.setTypedText(touchgfx::TypedText(T_SINGLEUSEID7));

    BrightnessSlider.setXY(9, 47);
    BrightnessSlider.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_SLIDER_VERTICAL_SMALL_SLIDER3_VERTICAL_ROUND_EDGE_BACK_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_VERTICAL_SMALL_SLIDER3_VERTICAL_ROUND_EDGE_BACK_ID), touchgfx::Bitmap(BITMAP_DARK_SLIDER_VERTICAL_SMALL_INDICATORS_SLIDER3_VERTICAL_ROUND_NOB_ID));
    BrightnessSlider.setupVerticalSlider(7, 3, 0, 0, 125);
    BrightnessSlider.setValueRange(0, 100);
    BrightnessSlider.setValue(50);
    BrightnessSlider.setNewValueCallback(sliderValueChangedCallback);

    button1.setXY(452, 121);
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_ICONS_NEXT_ARROW_48_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_NEXT_ARROW_48_ID));
    button1.setAction(buttonCallback);

    fpsValueTest.setPosition(0, 0, 80, 21);
    fpsValueTest.setColor(touchgfx::Color::getColorFrom24BitRGB(240, 19, 19));
    fpsValueTest.setLinespacing(0);
    Unicode::snprintf(fpsValueTestBuffer, FPSVALUETEST_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID15).getText());
    fpsValueTest.setWildcard(fpsValueTestBuffer);
    fpsValueTest.setTypedText(touchgfx::TypedText(T_SINGLEUSEID14));

    add(image5);
    add(CircleProgressBPV);
    add(batterypackvoltage_textbox);
    add(circleProgressTemp);
    add(Temperature_textbox);
    add(UsableCapacityBoxProgress);
    add(Usable_remaining_textbox);
    add(UsableCapacityFullBoxProgress);
    add(Usable_full_textbox);
    add(BrightnessSlider);
    add(button1);
    add(fpsValueTest);
}

void BatteryScreenViewBase::setupScreen()
{

}

void BatteryScreenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &button1)
    {
        //ButtonScreen1
        //When button1 clicked change screen to HistoricalStats
        //Go to HistoricalStats with screen transition towards West
        application().gotoHistoricalStatsScreenSlideTransitionWest();
    }
}

void BatteryScreenViewBase::sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value)
{
    if (&src == &BrightnessSlider)
    {
        //setBrightnessInteraction
        //When BrightnessSlider value changed call virtual function
        //Call setBrightnessScreen1
        setBrightnessScreen1(value);
    }
}
