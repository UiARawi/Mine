/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/chargedischargescreen_screen/ChargeDischargeScreenViewBase.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Color.hpp>

ChargeDischargeScreenViewBase::ChargeDischargeScreenViewBase() :
    buttonCallback(this, &ChargeDischargeScreenViewBase::buttonCallbackHandler)
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);

    image1.setXY(0, 0);
    image1.setBitmap(touchgfx::Bitmap(BITMAP_DARK_BACKGROUNDS_MAIN_BG_TEXTURE_480X272PX_ID));

    fpsScreen3.setPosition(0, 0, 80, 21);
    fpsScreen3.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 0, 0));
    fpsScreen3.setLinespacing(0);
    Unicode::snprintf(fpsScreen3Buffer, FPSSCREEN3_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID29).getText());
    fpsScreen3.setWildcard(fpsScreen3Buffer);
    fpsScreen3.setTypedText(touchgfx::TypedText(T_SINGLEUSEID23));

    BMS_Max_Charge_Textarea.setPosition(90, 194, 300, 21);
    BMS_Max_Charge_Textarea.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    BMS_Max_Charge_Textarea.setLinespacing(0);
    Unicode::snprintf(BMS_Max_Charge_TextareaBuffer, BMS_MAX_CHARGE_TEXTAREA_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID33).getText());
    BMS_Max_Charge_Textarea.setWildcard(BMS_Max_Charge_TextareaBuffer);
    BMS_Max_Charge_Textarea.setTypedText(touchgfx::TypedText(T_SINGLEUSEID24));

    BMS_Max_Discharge_Textarea.setPosition(90, 232, 300, 21);
    BMS_Max_Discharge_Textarea.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    BMS_Max_Discharge_Textarea.setLinespacing(0);
    Unicode::snprintf(BMS_Max_Discharge_TextareaBuffer, BMS_MAX_DISCHARGE_TEXTAREA_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID34).getText());
    BMS_Max_Discharge_Textarea.setWildcard(BMS_Max_Discharge_TextareaBuffer);
    BMS_Max_Discharge_Textarea.setTypedText(touchgfx::TypedText(T_SINGLEUSEID25));

    DissipationProgress.setXY(38, 136);
    DissipationProgress.setProgressIndicatorPosition(2, 2, 400, 30);
    DissipationProgress.setRange(0, 50);
    DissipationProgress.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
    DissipationProgress.setBackground(touchgfx::Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_BG_LARGE_PROGRESS_INDICATOR_BG_SQUARE_0_DEGREES_ID));
    DissipationProgress.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 151, 255));
    DissipationProgress.setValue(0);

    Dissipation_Textarea.setPosition(87, 143, 300, 21);
    Dissipation_Textarea.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    Dissipation_Textarea.setLinespacing(0);
    Unicode::snprintf(Dissipation_TextareaBuffer, DISSIPATION_TEXTAREA_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID32).getText());
    Dissipation_Textarea.setWildcard(Dissipation_TextareaBuffer);
    Dissipation_Textarea.setTypedText(touchgfx::TypedText(T_SINGLEUSEID26));

    Regen_Power_Max_Textarea.setPosition(47, 106, 190, 24);
    Regen_Power_Max_Textarea.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    Regen_Power_Max_Textarea.setLinespacing(0);
    Unicode::snprintf(Regen_Power_Max_TextareaBuffer, REGEN_POWER_MAX_TEXTAREA_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID30).getText());
    Regen_Power_Max_Textarea.setWildcard(Regen_Power_Max_TextareaBuffer);
    Regen_Power_Max_Textarea.setTypedText(touchgfx::TypedText(T_SINGLEUSEID27));

    Stator_Current_Textarea.setPosition(240, 106, 195, 24);
    Stator_Current_Textarea.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    Stator_Current_Textarea.setLinespacing(0);
    Unicode::snprintf(Stator_Current_TextareaBuffer, STATOR_CURRENT_TEXTAREA_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID31).getText());
    Stator_Current_Textarea.setWildcard(Stator_Current_TextareaBuffer);
    Stator_Current_Textarea.setTypedText(touchgfx::TypedText(T_SINGLEUSEID28));

    ButtonBack.setXY(0, 112);
    ButtonBack.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_ICONS_BACK_ARROW_48_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_BACK_ARROW_48_ID));
    ButtonBack.setAction(buttonCallback);

    ButtonNext.setXY(452, 112);
    ButtonNext.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_ICONS_NEXT_ARROW_48_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_NEXT_ARROW_48_ID));
    ButtonNext.setAction(buttonCallback);

    RegenPowerCircle.setXY(50, 11);
    RegenPowerCircle.setProgressIndicatorPosition(0, 0, 184, 94);
    RegenPowerCircle.setRange(0, 400);
    RegenPowerCircle.setCenter(92, 92);
    RegenPowerCircle.setRadius(82);
    RegenPowerCircle.setLineWidth(16);
    RegenPowerCircle.setStartEndAngle(-90, 90);
    RegenPowerCircle.setCapPrecision(180);
    RegenPowerCircle.setBackground(touchgfx::Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_BG_LARGE_CIRCLE_INDICATOR_BG_LINE_HALF_ID));
    RegenPowerCirclePainter.setColor(touchgfx::Color::getColorFrom24BitRGB(32, 159, 78));
    RegenPowerCircle.setPainter(RegenPowerCirclePainter);
    RegenPowerCircle.setValue(0);

    StatorCurrentCircle.setXY(242, 10);
    StatorCurrentCircle.setProgressIndicatorPosition(0, 0, 184, 94);
    StatorCurrentCircle.setRange(0, 400);
    StatorCurrentCircle.setCenter(92, 92);
    StatorCurrentCircle.setRadius(82);
    StatorCurrentCircle.setLineWidth(16);
    StatorCurrentCircle.setStartEndAngle(-90, 90);
    StatorCurrentCircle.setCapPrecision(180);
    StatorCurrentCircle.setBackground(touchgfx::Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_BG_LARGE_CIRCLE_INDICATOR_BG_LINE_HALF_ID));
    StatorCurrentCirclePainter.setColor(touchgfx::Color::getColorFrom24BitRGB(32, 159, 78));
    StatorCurrentCircle.setPainter(StatorCurrentCirclePainter);
    StatorCurrentCircle.setValue(0);

    add(image1);
    add(fpsScreen3);
    add(BMS_Max_Charge_Textarea);
    add(BMS_Max_Discharge_Textarea);
    add(DissipationProgress);
    add(Dissipation_Textarea);
    add(Regen_Power_Max_Textarea);
    add(Stator_Current_Textarea);
    add(ButtonBack);
    add(ButtonNext);
    add(RegenPowerCircle);
    add(StatorCurrentCircle);
}

void ChargeDischargeScreenViewBase::setupScreen()
{

}

void ChargeDischargeScreenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &ButtonBack)
    {
        //Interaction1
        //When ButtonBack clicked change screen to HistoricalStats
        //Go to HistoricalStats with screen transition towards West
        application().gotoHistoricalStatsScreenSlideTransitionWest();
    }
    else if (&src == &ButtonNext)
    {
        //Interaction2
        //When ButtonNext clicked change screen to PowerScreen
        //Go to PowerScreen with screen transition towards West
        application().gotoPowerScreenScreenSlideTransitionWest();
    }
}
