/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef BATTERYSCREENVIEWBASE_HPP
#define BATTERYSCREENVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/batteryscreen_screen/BatteryScreenPresenter.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/containers/progress_indicators/CircleProgress.hpp>
#include <touchgfx/widgets/canvas/PainterRGB888.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/containers/progress_indicators/BoxProgress.hpp>
#include <touchgfx/containers/Slider.hpp>
#include <touchgfx/widgets/Button.hpp>

class BatteryScreenViewBase : public touchgfx::View<BatteryScreenPresenter>
{
public:
    BatteryScreenViewBase();
    virtual ~BatteryScreenViewBase() {}
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void setBrightnessScreen1(int value)
    {
        // Override and implement this function in BatteryScreen
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Image image5;
    touchgfx::CircleProgress CircleProgressBPV;
    touchgfx::PainterRGB888 CircleProgressBPVPainter;
    touchgfx::TextAreaWithOneWildcard batterypackvoltage_textbox;
    touchgfx::CircleProgress circleProgressTemp;
    touchgfx::PainterRGB888 circleProgressTempPainter;
    touchgfx::TextAreaWithOneWildcard Temperature_textbox;
    touchgfx::BoxProgress UsableCapacityBoxProgress;
    touchgfx::TextAreaWithOneWildcard Usable_remaining_textbox;
    touchgfx::BoxProgress UsableCapacityFullBoxProgress;
    touchgfx::TextAreaWithOneWildcard Usable_full_textbox;
    touchgfx::Slider BrightnessSlider;
    touchgfx::Button button1;
    touchgfx::TextAreaWithOneWildcard fpsValueTest;

    /*
     * Wildcard Buffers
     */
    static const uint16_t BATTERYPACKVOLTAGE_TEXTBOX_SIZE = 10;
    touchgfx::Unicode::UnicodeChar batterypackvoltage_textboxBuffer[BATTERYPACKVOLTAGE_TEXTBOX_SIZE];
    static const uint16_t TEMPERATURE_TEXTBOX_SIZE = 10;
    touchgfx::Unicode::UnicodeChar Temperature_textboxBuffer[TEMPERATURE_TEXTBOX_SIZE];
    static const uint16_t USABLE_REMAINING_TEXTBOX_SIZE = 10;
    touchgfx::Unicode::UnicodeChar Usable_remaining_textboxBuffer[USABLE_REMAINING_TEXTBOX_SIZE];
    static const uint16_t USABLE_FULL_TEXTBOX_SIZE = 10;
    touchgfx::Unicode::UnicodeChar Usable_full_textboxBuffer[USABLE_FULL_TEXTBOX_SIZE];
    static const uint16_t FPSVALUETEST_SIZE = 15;
    touchgfx::Unicode::UnicodeChar fpsValueTestBuffer[FPSVALUETEST_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<BatteryScreenViewBase, const touchgfx::AbstractButton&> buttonCallback;
    touchgfx::Callback<BatteryScreenViewBase, const touchgfx::Slider&, int> sliderValueChangedCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);
    void sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value);

    /*
     * Canvas Buffer Size
     */
    static const uint16_t CANVAS_BUFFER_SIZE = 7200;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];
};

#endif // BATTERYSCREENVIEWBASE_HPP
